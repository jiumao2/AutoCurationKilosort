function plotQualityMetrics(metrics, folder, threshold)
if nargin < 2
    folder = './';
end

if nargin < 3
    threshold = NaN(1, length(metrics.metric_names));
end

fig = EasyPlot.figure();

ax_all = EasyPlot.createGridAxes(fig, ceil(length(metrics.metrics)/2), 2,...
    'MarginLeft', 1,...
    'Width', 6,...
    'Height', 3,...
    'MarginBottom', 1);

keys_set = {'ISI violations',...
    'Presence ratio',...
    'Amplitude cutoffs',...
    'Isolation distance',...
    'Median Amplitude',...
    'D prime',...
    'Nearest-neighbor miss rate',...
    'Nearest-neighbor hit rate',...
    'L ratio'};

values_binwidth = {0.005,...
    0.01,...
    0.01,...
    1,...
    1,...
    1,...
    0.002,...
    0.01,...
    0.01};

values_xlim_low = {0,...
    0.5,...
    0,...
    0,...
    0,...
    0,...
    0,...
    0,...
    0};

values_xlim_high = {...
    0.2,...
    1,...
    0.5,...
    50,...
    100,...
    50,...
    0.05,...
    1,...
    0.5};

binwidth = containers.Map(keys_set, values_binwidth);

xlim_low = containers.Map(keys_set, values_xlim_low);

xlim_high = containers.Map(keys_set, values_xlim_high);

is_good_label = strcmpi(metrics.labels, 'good');

% remove the extreme values
idx_isi_violations = find(strcmpi(metrics.metric_names, 'ISI violations'));
metrics.metrics{idx_isi_violations}(metrics.metrics{idx_isi_violations} > 3) = NaN; 

idx_l_ratio = find(strcmpi(metrics.metric_names, 'L ratio'));
metrics.metrics{idx_l_ratio}(metrics.metrics{idx_l_ratio} > 3) = NaN;

idx_isolation_distance = find(strcmpi(metrics.metric_names, 'Isolation distance'));
metrics.metrics{idx_isolation_distance}(metrics.metrics{idx_isolation_distance} > xlim_high('Isolation distance')) = xlim_high('Isolation distance');

idx_isolation_distance = find(strcmpi(metrics.metric_names, 'D prime'));
metrics.metrics{idx_isolation_distance}(metrics.metrics{idx_isolation_distance} > xlim_high('D prime')) = xlim_high('D prime');


for k = 1:length(metrics.metrics)
    histogram(ax_all{k}, metrics.metrics{k}, 'BinWidth', binwidth(metrics.metric_names{k}));
    histogram(ax_all{k}, metrics.metrics{k}(is_good_label), 'BinWidth', binwidth(metrics.metric_names{k}));
    title(ax_all{k}, metrics.metric_names{k});

    if ~isnan(threshold(k))
        xline(ax_all{k}, threshold(k), 'k:', 'LineWidth', 2);
    end

    xlim(ax_all{k}, [xlim_low(metrics.metric_names{k}), xlim_high(metrics.metric_names{k})]);
    ylim(ax_all{k}, 'auto');
end

EasyPlot.cropFigure(fig);
EasyPlot.exportFigure(fig, fullfile(folder, 'MetricsDistribution.png'));
end